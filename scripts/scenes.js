const Scene = require('telegraf/scenes/base')
const my_functions = require('./funcs.js')
const keyboard_text = require('./keyboards_text_acl.js')
const flood = require ('../flood/app_flood.js')

module.exports = {
	single_scene() {
		// –ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω—ã –¥–ª—è —Ñ–ª—É–¥–∞ –Ω–∞ –æ–¥–∏–Ω –Ω–æ–º–µ—Ä
		const single = new Scene('single_scene')
		single.on('text', async (ctx) => {
			const flood_number = ctx.message.text,
			symbols_letters_there_are = /[a-zA-Z–∞-—è–ê-–Ø!$@#‚Ññ%^&*_|~=`{}\[\]:";'<>?.\/\u2700-\u27BF]|[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2011-\u26FF]|\uD83E[\uDD10-\uDDFF]]/.test(flood_number),
			may_be_scope = /,/.test(flood_number);

			if (!symbols_letters_there_are && !may_be_scope) { //–ï—Å–ª–∏ –≤–≤–µ–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –±—É–∫–≤–∞–º–∏	
				let number_end = my_functions.filter_input_data_single(ctx, flood_number);
				if (number_end === 'Bad number') {
					return single;
				} else {
					ctx.scene.session.tima = number_end;
					my_functions.my_inline_keyboard(ctx, '–í–∞—à –Ω–æ–º–µ—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω flood:\n' + my_functions.output_number_data_single(number_end) + '\n–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ –∏ *–∑–∞–ø—É—Å—Ç–∏—Ç–µ* —Ñ–ª—É–¥‚ùóÔ∏è', keyboard_text.third_keyboard)
				}
			} else if (flood_number === '–ü–µ—Ä–µ–π—Ç–∏ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª' || flood_number === '/start' || flood_number === '/help' || flood_number === '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
				ctx.scene.leave()
				my_functions.my_inline_keyboard(ctx, keyboard_text.main_text, keyboard_text.first_keyboard)
			} else if (!symbols_letters_there_are && may_be_scope && flood_number.length > 20) {
				my_functions.my_inline_keyboard(ctx, '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ *Single flood*. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å flood –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–æ–≤, –≤–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª üëâ *Scope flood*‚ùóÔ∏è ', keyboard_text.fifth_keyboard)
			} else if (symbols_letters_there_are && ctx.scene.session.tima === undefined) {	//–ï—Å–ª–∏ –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –±—É–∫–≤–∞–º–∏	
				my_functions.my_simple_keyboard(ctx, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä‚ùóÔ∏è ', '–ü–µ—Ä–µ–π—Ç–∏ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª')	
			} else if (symbols_letters_there_are && ctx.scene.session.tima !== undefined) { //–ï—Å–ª–∏ –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
				my_functions.my_inline_keyboard(ctx, '–í—ã —É–∂–µ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω floodüëÜ\n–í–∞–º —Ç–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—Ç—å –∑–∞–ø—É—Å—Ç–∏—Ç—å flood –∏–ª–∏ –∂–µ –µ–≥–æ –æ—Ç–º–µ–Ω–∏—Ç—å‚ùóÔ∏è', keyboard_text.third_keyboard)
			} else {
				my_functions.my_simple_keyboard(ctx, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä‚ùóÔ∏è ', '–ü–µ—Ä–µ–π—Ç–∏ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª')	
				return single;
			}

		})
		
		single.action('Main_menu', async (ctx) => {
				ctx.answerCbQuery()
				await ctx.scene.leave()
				my_functions.my_inline_keyboard(ctx, keyboard_text.main_text, keyboard_text.first_keyboard)
		})

		single.action('run', async (ctx) => {
				ctx.answerCbQuery()
				if (ctx.scene.session.tima !== undefined) {
					flood.start_single_flood(ctx, ctx.scene.session.tima) // –∑–∞–ø—É—Å–∫ Flood-–∞
					my_functions.my_inline_keyboard(ctx, '–ù–∞ –Ω–∏–∂–µ—É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä, –±—ã–ª –∑–∞–ø—É—â–µ–Ω flood:\n' + my_functions.output_number_data_single(ctx.scene.session.tima) + '\nFlood –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ—Å–ª–µ 5 –º–∏–Ω—É—Ç üòâ', keyboard_text.second_keyboard)
					my_functions.append_in_file('Flood_numbers.txt', `${ctx.from.id}: –∑–∞–ø—É—Å—Ç–∏–ª "Single flood" –Ω–∞ –Ω–æ–º–µ—Ä - ${ctx.scene.session.tima}`)
					delete ctx.scene.session.tima
					ctx.scene.leave()
				} else if (ctx.scene.session.tima === undefined){
					ctx.reply('–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä‚ùóÔ∏è')
				} else {
					return single
				}
		})

		single.action('cancel', async (ctx) => {
				ctx.answerCbQuery()
				delete ctx.scene.session.tima
				await ctx.scene.leave()
				my_functions.my_inline_keyboard(ctx, keyboard_text.main_text, keyboard_text.first_keyboard)
		})

		single.action('scope', async (ctx) => {
				ctx.answerCbQuery()
				await ctx.scene.enter('scope_scene')
				my_functions.my_inline_keyboard(ctx, keyboard_text.scope_text, keyboard_text.second_keyboard);
		})

		single.on('message', (ctx) => ctx.reply(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ`))

		return single;
	},

	scope_scene() {
		// –ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω—ã –¥–ª—è —Ñ–ª—É–¥–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–æ–≤
		const scope = new Scene('scope_scene')
		scope.on('text', async (ctx) => {
			const flood_number = ctx.message.text,
			symbols_letters_there_are = /[a-zA-Z–∞-—è–ê-–Ø!$@#‚Ññ%^&*_|~=`{}\[\]:";'<>?.\/\u2700-\u27BF]|[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2011-\u26FF]|\uD83E[\uDD10-\uDDFF]]/.test(flood_number),
			may_be_scope = /,/.test(flood_number);
				
			if (!symbols_letters_there_are && may_be_scope) { //–ï—Å–ª–∏ –≤–≤–µ–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –±—É–∫–≤–∞–º–∏	
				let number_end = my_functions.filter_input_data_scope(ctx, flood_number);
				if (number_end === 'Bad number') {
					return scope;
				} else {		
					ctx.scene.session.tima = number_end;
					my_functions.my_inline_keyboard(ctx, '–í–∞—à–∏ –Ω–æ–º–µ—Ä–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω flood:\n' + my_functions.output_number_data_scope(number_end) + '–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ –∏ *–∑–∞–ø—É—Å—Ç–∏—Ç–µ* —Ñ–ª—É–¥‚ùóÔ∏è', keyboard_text.third_keyboard)				
				}

			} else if (flood_number === '–ü–µ—Ä–µ–π—Ç–∏ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª' || flood_number === '/start' || flood_number === '/help' || flood_number === '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
				
				ctx.scene.leave()
				my_functions.my_inline_keyboard(ctx, keyboard_text.main_text, keyboard_text.first_keyboard)

			} else if (!symbols_letters_there_are && !may_be_scope) {

				my_functions.my_inline_keyboard(ctx, '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ *Scope flood*. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å flood –Ω–∞ –æ–¥–∏–Ω –Ω–æ–º–µ—Ä, –≤–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª üëâ *Single flood*‚ùóÔ∏è ', keyboard_text.fourth_keyboard)

			} else if (symbols_letters_there_are && ctx.scene.session.tima === undefined) {	//–ï—Å–ª–∏ –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –±—É–∫–≤–∞–º–∏	

				my_functions.my_simple_keyboard(ctx, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä–∞‚ùóÔ∏è ', '–ü–µ—Ä–µ–π—Ç–∏ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª')	

			} else if (symbols_letters_there_are && ctx.scene.session.tima !== undefined) { //–ï—Å–ª–∏ –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞

				my_functions.my_inline_keyboard(ctx, '–í—ã —É–∂–µ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω floodüëÜ\n–í–∞–º —Ç–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—Ç—å –∑–∞–ø—É—Å—Ç–∏—Ç—å flood –∏–ª–∏ –∂–µ –µ–≥–æ –æ—Ç–º–µ–Ω–∏—Ç—å‚ùóÔ∏è', keyboard_text.third_keyboard)

			} else {
				my_functions.my_simple_keyboard(ctx, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä–∞‚ùóÔ∏è ', '–ü–µ—Ä–µ–π—Ç–∏ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª')	
				return scope;
			}

		})
		
		scope.action('Main_menu', async (ctx) => {
				ctx.answerCbQuery()
				await ctx.scene.leave()
				my_functions.my_inline_keyboard(ctx, keyboard_text.main_text, keyboard_text.first_keyboard)
		})

		scope.action('run', async (ctx) => {
				ctx.answerCbQuery()
				if (ctx.scene.session.tima !== undefined) {
					flood.start_scope_flood(ctx, ctx.scene.session.tima) // –∑–∞–ø—É—Å–∫ Flood-–∞
					my_functions.my_inline_keyboard(ctx, '–ù–∞ –Ω–∏–∂–µ—É–∫–∞–∑–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞, –±—ã–ª –∑–∞–ø—É—â–µ–Ω flood:\n' + my_functions.output_number_data_scope(ctx.scene.session.tima) + 'Flood –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ—Å–ª–µ 5 –º–∏–Ω—É—Ç üòâ', keyboard_text.second_keyboard)
					my_functions.append_in_file('Flood_numbers.txt', `${ctx.from.id}: –∑–∞–ø—É—Å—Ç–∏–ª "Scope flood" –Ω–∞ –Ω–æ–º–µ—Ä–∞ - ${ctx.scene.session.tima}`)
					delete ctx.scene.session.tima
					ctx.scene.leave()
				} else if (ctx.scene.session.tima === undefined){
					ctx.reply('–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä‚ùóÔ∏è')
				} else {
					return scope
				}
		})

		scope.action('cancel', async (ctx) => {
				ctx.answerCbQuery()
				delete ctx.scene.session.tima
				await ctx.scene.leave()
				my_functions.my_inline_keyboard(ctx, keyboard_text.main_text, keyboard_text.first_keyboard)
		})

		scope.action('single', async (ctx) => {
				ctx.answerCbQuery()
				await ctx.scene.enter('single_scene')
				my_functions.my_inline_keyboard(ctx, keyboard_text.single_text, keyboard_text.second_keyboard);
		})

		scope.on('message', (ctx) => ctx.reply(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ`))

		return scope;
	},

	greater_scene() {
		// –ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω—ã –¥–ª—è –ê–¥–º–∏–Ω–∞ –Ω–∞ –≤—ã–¥–∞—á—É –¥–æ—Å—Ç—É–ø–∞ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
		const greater = new Scene('greater_scene')
		greater.on('text', async (ctx) => {
			let id_to_add;
			const text_id = ctx.message.text,
			symbols_letters_there_are = /[a-zA-Z–∞-—è–ê-–Ø-!$#‚Ññ%^&*()_+|~=`{}\[\]:";'<>?,.\/ ]/.test(text_id),
			to_write = /[.]/.test(text_id);
			if (text_id === '–í—ã–π—Ç–∏') {
				ctx.scene.leave()
				my_functions.my_simple_keyboard(ctx, 'Greator, you are left', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
			} else if (symbols_letters_there_are && !to_write) {
				ctx.reply('Greator, please write correct id !!!')
			} else if (symbols_letters_there_are && to_write){
				my_functions.append_in_file('Access_list.txt', ctx.message.text + '\n')
				my_functions.my_simple_keyboard(ctx, 'Thanks, I take information, what else?', '–í—ã–π—Ç–∏')
			}	else {
				id_to_add = Number(text_id);
				keyboard_text.access_list.push(id_to_add);
				// console.log(keyboard_text_acl.access_list);
				my_functions.append_in_file('Access_list.txt', id_to_add + ": ");
				ctx.reply('Ok, this id has been added: ' + text_id + '\nPlease, write information about user')
			}
		})

		return greater;
	},

	test_flood_scene() {
		const test_flood = new Scene('test_flood')
		test_flood.on('text', async (ctx) => {
			const flood_number = ctx.message.text
			let number_end = my_functions.filter_input_data_scope(ctx, flood_number);
			if (number_end === 'Bad number') {
				return scope;
			} else {
				ctx.scene.session.tima = number_end;
				my_functions.my_inline_keyboard(ctx, '–°–æ–∑–¥–∞—Ç–µ–ª—å, –≤–∞—à–∏ –Ω–æ–º–µ—Ä–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω flood:\n' + my_functions.output_number_data_scope(number_end) + '–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ –∏ *–∑–∞–ø—É—Å—Ç–∏—Ç–µ* —Ñ–ª—É–¥‚ùóÔ∏è', keyboard_text.third_keyboard)				
			}

		})

		test_flood.action('run', async (ctx) => {
				ctx.answerCbQuery()
				if (ctx.scene.session.tima !== undefined) {
					flood.test_scope_flood(ctx, ctx.scene.session.tima) // –∑–∞–ø—É—Å–∫ Flood-–∞
					my_functions.my_inline_keyboard(ctx, '–ù–∞ –Ω–∏–∂–µ—É–∫–∞–∑–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞, –±—ã–ª –∑–∞–ø—É—â–µ–Ω flood:\n' + my_functions.output_number_data_scope(ctx.scene.session.tima) + '–°–æ–∑–¥–∞—Ç–µ–ª—å, –ø–æ–¥–æ–∂–¥–∏ —á—É—Ç—å-—á—É—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –ø–æ–π—Ç–∏!', keyboard_text.second_keyboard)
					my_functions.append_in_file('Flood_numbers.txt', `${ctx.from.id}: –¢–æ—á–Ω–µ–µ –Ø –∑–∞–ø—É—Å—Ç–∏–ª "Test Scope flood" –Ω–∞: ${ctx.scene.session.tima}`)
					delete ctx.scene.session.tima
					ctx.scene.leave()
				} else if (ctx.scene.session.tima === undefined){
					ctx.reply('–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä‚ùóÔ∏è')
				} else {
					return test_flood
				}
		})

		test_flood.action('cancel', async (ctx) => {
				ctx.answerCbQuery()
				delete ctx.scene.session.tima
				await ctx.scene.leave()
				my_functions.my_inline_keyboard(ctx, keyboard_text.main_text, keyboard_text.first_keyboard)
		})

		test_flood.on('message', (ctx) => ctx.reply(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ`))

		return test_flood;

	}
}